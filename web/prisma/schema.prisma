// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Organization {
  id         String   @id @default(cuid())
  name       String
  slug       String   @unique
  email      String?
  phone      String?
  address    String?
  city       String?
  state      String?
  zipCode    String?
  country    String?
  logoUrl    String?
  website    String?
  settings   Json?    @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  members    UserOrganization[]
  facilities Facility[]

  @@index([slug])
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  name               String?
  passwordHash       String?
  emailVerified      Boolean   @default(false)
  imageUrl           String?
  lastLogin          DateTime?
  onboardingComplete Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  organizations UserOrganization[]

  @@index([email])
}

model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  roles          String[]    // Array of role names
  isDefault      Boolean     @default(false) // Is this the user's default organization
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Facility {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  slug           String
  address        String?
  city           String?
  state          String?
  zipCode        String?
  country        String?
  phone          String?
  email          String?
  website        String?
  operatingHours Json?        @default("{}")
  settings       Json?        @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, slug])
  @@index([organizationId])
  @@index([slug])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String[] // Array of permission names
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@index([token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@index([token])
}