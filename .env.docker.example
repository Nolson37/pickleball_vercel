# Pickleball Platform - Docker Environment Configuration
# Copy this file to .env.docker and customize for your Docker deployment
# This file is used by docker-compose.yml for container environment variables

# =============================================================================
# DATABASE CONFIGURATION (Docker PostgreSQL)
# =============================================================================
# PostgreSQL configuration for Docker container
POSTGRES_DB=pickleball
POSTGRES_USER=postgres
POSTGRES_PASSWORD=your-secure-postgres-password-change-this

# =============================================================================
# APPLICATION CONFIGURATION (Docker)
# =============================================================================
# Application environment mode
NODE_ENV=production

# Database connection string for the app container
# Note: Uses service name 'db' as hostname (Docker internal networking)
DATABASE_URL=postgresql://postgres:your-secure-postgres-password-change-this@db:5432/pickleball

# =============================================================================
# AUTHENTICATION CONFIGURATION (Docker)
# =============================================================================
# Auth.js/NextAuth configuration
AUTH_SECRET=your-super-secret-nextauth-key-generate-a-new-one-for-production
AUTH_URL=http://localhost:3000

# Alternative naming (some configurations use NEXTAUTH_*)
NEXTAUTH_SECRET=your-super-secret-nextauth-key-generate-a-new-one-for-production
NEXTAUTH_URL=http://localhost:3000

# =============================================================================
# EMAIL CONFIGURATION (Docker)
# =============================================================================
# SMTP server configuration for sending emails
# Update these with your actual email service provider
EMAIL_SERVER=smtp://username:password@smtp.example.com:587
EMAIL_FROM=noreply@yourdomain.com

# =============================================================================
# SECURITY CONFIGURATION (Docker)
# =============================================================================
# CSRF protection secret
CSRF_SECRET=your-csrf-secret-change-in-production

# =============================================================================
# FEATURE FLAGS (Docker)
# =============================================================================
# Public environment identifier (visible to frontend)
NEXT_PUBLIC_APP_ENV=docker

# =============================================================================
# DOCKER DEPLOYMENT INSTRUCTIONS
# =============================================================================
# 1. Copy this file to .env.docker:
#    cp .env.docker.example .env.docker
#
# 2. Update all password and secret values:
#    - POSTGRES_PASSWORD: Use a strong, unique password
#    - AUTH_SECRET/NEXTAUTH_SECRET: Generate with `openssl rand -base64 32`
#    - CSRF_SECRET: Generate with `openssl rand -base64 32`
#
# 3. Update EMAIL_SERVER and EMAIL_FROM with your SMTP provider details
#
# 4. If deploying to production, update AUTH_URL/NEXTAUTH_URL to your domain
#
# 5. Start the application:
#    docker compose up --build
#
# 6. The application will be available at http://localhost:3000
#
# IMPORTANT SECURITY NOTES:
# - Never commit .env.docker with real secrets to version control
# - Use strong, unique passwords for production deployments
# - Ensure your SMTP credentials are secure
# - Consider using Docker secrets for production deployments